dump:
  enabled: false
  status: ""
  message: ""

cloud:
  provider: gcp # aws|gcp|scw
  default:
    location: europe-west1

cluster:
  config:
    name: kube-core
    domain: dev.kube-core.io

patch:
  serviceAccountName: my-patch-operator-sa

resource:
  cro-registry:
    enabled: false
  scw-vpc:
    enabled: false
  scw-project:
    enabled: false
  scw-registry:
    enabled: false
  scw-serviceaccountkey:
    enabled: false
  scw-projectiammember:
    enabled: false
  scw-serviceaccount:
    enabled: false
  scw-bucket:
    enabled: false
  eck-elasticsearch:
    enabled: false
    storageSize: 20Gi
    storageClassName: gcp-sc-delete-wait
    esJavaOpts: -Xms500m -Xmx500m
    replicas: 3
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        memory: 1Gi
  eck-kibana:
    enabled: false
  slack-channel:
    enabled: false
    # channelName: "my-channel-with-prefix"
    # channelNameOverride: "my-channel-without-prefix"
    # topic: "default"
    # description: "Default slack channel"
    # users:
    # - user@domain.tld
  prometheus-servicemonitor:
    enabled: false
  chaos-schedule:
    enabled: false
    pause: false
    schedule: "* * * * *"
    startingDeadlineSeconds: 604800
    concurrencyPolicy: Forbid
    historyLimit: 1
    type: PodChaos
    podChaos:
      mode: fixed-percent
      value: "50"
      action: pod-kill
      duration: 10s

  gcp-backendbucket:
    enabled: false
  gcp-bucket:
    enabled: false
  gcp-bucketpolicy:
    enabled: false
  gcp-globaladdress:
    enabled: false
  gcp-globalforwardingrule:
    enabled: false
  gcp-managedsslcertificate:
    enabled: false
  gcp-managedzone:
    enabled: false
  gcp-projectiamcustomrole:
    enabled: false
  gcp-projectiammember:
    enabled: false
  gcp-recordset:
    enabled: false
  gcp-serviceaccount:
    enabled: false
  gcp-serviceaccountiammember:
    enabled: false
  gcp-serviceaccountkey:
    enabled: false
  gcp-serviceaccountpolicy:
    enabled: false
  gcp-targethttpproxy:
    enabled: false
  gcp-targethttpsproxy:
    enabled: false
  gcp-urlmap:
    enabled: false
  kube-deployment:
    enabled: false
    defaultImagePolicy: default
    defaultImagePoliciesEnabled: true
    labels: {}
    annotations:
      reloader.stakater.com/auto: "true"
    progressDeadlineSeconds: ""
    minReadySeconds: ""
    # -- Automatically create podDisruptionBudget if more than 1 replica
    replicaCount: 1
    # -- Default to 1 if not set for the podDisruptionBudget
    minAvailable: 1
    # -- Default Rolling Update
    strategy:
      {}
      # type: Recreate
    securityContext:
      {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    ##  Configure an init-container
    initContainer:
      enabled: false
      command: []
      resources:
        {}
        #  limits:
        #    memory: 100M
        #  requests:
        #    memory: 100M
        #    cpu: 35m

    logging:
      enabled: false # Adds logging.kube-core.io/flow-name: app annotation to catch logs with logging-operator

    ## Relate to the templating of the pods managed by the deployment
    pod:
      workingDir: ""
      command: []
      args: []
      annotations: {}
      securityContext:
        {}
        # fsGroup: 2000
      envFrom:
        enabled: true
        configmaps: []
        secrets: []
      env:
        # -- Define env values for pods, example commented out in values.yaml files
        values:
          []
          # - name: ENV_VALUES
          #   value: "something"
        # -- Define secret env values for pods, example commented out in values.yaml files
        secrets:
          []
          # - name: SECRET_ENV_VALUES # if not set, secretKey will be used
          #   secretName: my-in-cluster-secret
          #   secretKey: its-content
          #   optional: false (default), when true: the lack of this secret ENV VALUES won't prevent the pod from starting
        # -- Define and sent env Values as a map, useful for yaml merge
        valuesMap:
          {}
          # ENV_VALUES: "something"
      additionalEnv:
        values: []
        secrets: []
        valuesMap: {}
      mounts:
        # -- Define configmap to attach and mount, example commented out in values.yaml files
        configMap: []
        # - name: certs-configmap # name of the configmap to mount
        #   mountPath: /etc/configmaps/
        #   subPath: "" # (optional) default to null
        #   readOnly: true # (optional) default to true
        # -- Define secrets to attach and mount, example commented out in values.yaml files
        secrets: []
        # - name: secret-files # name of the mount
        #   mountPath: /etc/secrets
        #   secretName: -secret-files # name of secret
        #   defaultMode: 256 # (optional) default to 256
        #   readOnly: true # (optional) default to true
        # -- Define map of configmap to mount, useful for yaml merge
        configMapMap:
          {}
          # configMapName: mountPath
        # -- Define pvc to attach and mount, example commented out in values.yaml files

    ## Defined pods ressources
    resources:
      {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    ## Define endpoints and service to expose metrics
    metrics:
      # -- Condition to enable ports and service for metrics endpoints
      enabled: false
      ## Default is set from apiType
      port: ""
      ## Create a service monitor for kps to listen metrics
      serviceMonitor:
        enabled: false
        # -- Value in seconds suffixed by unit 's'
        interval: "15s"

    ## Image details
    image:
      repository: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      # -- Define the image tag which by default is 'latest'
      tag: "latest"
      # -- Overrides tag if set
      digest: ""

    ## Define value relative to kube scheduling
    scheduling:
      nodeSelector: {}
      tolerations: []
      affinity: {}
    ## Configure liveness & readiness probe
    healthCheck:
      enabled: true
      # -- Enabled usage of tcpSocket probe over httpget probe
      tcpSocket: false
      # -- Specify port to probe if different from service port
      port: ""
      # -- Specify a port for httpGet probe, if different from /ping for node or /actuator/health for java
      path: "/"
      initialDelaySeconds: 3
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      liveness:
        enabled: true
        ## Values to override global healtcheck values
        # tcpSocket:
        # port: ""
        # path: /
        # initialDelaySeconds: 3
        # periodSeconds: 10
        # timeoutSeconds: 1
        # failureThreshold: 3
      readiness:
        enabled: true
        ## Values to override global healtcheck values
        # tcpSocket:
        # port: ""
        # path: /
        # initialDelaySeconds: 3
        # periodSeconds: 10
        # timeoutSeconds: 1
        # failureThreshold: 3

  kube-service:
    enabled: false
    type: ClusterIP
    port: 80
    # -- Port to access on the pod if different from port used by service
    targetPort: ""
    labels: {}
    annotations: {}
    # -- Create additional pods endpoints and relative service
    additionalPorts: []
  kube-hpa:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 5
    cpu: 100
    memory: 80
  kube-pdb:
    # -- Create Pod Disruption Budget
    enabled: false
    # minAvailable: 1
  app-ingress:
    enabled: false
    default: true
    annotations: {}
    labels: {}
    className: nginx
    globalEasyTls: true
    # host: app.demo.scw.frog-cloud.io
    # serviceName: test
    # portName: ""
    # portNumber: 3030
    # path: /test/123
    # pathType: "Stuff"

    options:
      mergeable: false
      mergeableType: "master" # Can be "master" or "minion"
      # accessFiltered: true
      # allowedVisitors: self,admin
      # autoDiscover: true
      # clusterIssuer: letsencrypt-dns-production
      # previewVisitors: self,admin
      # proxyBodySize: 200m
      # serviceUpstream: true
      # ttl: 5
      # upstreamVhost: nk-api.prod.svc.cluster.local
  kube-ingress:
    enabled: false
    defaultRules: true
    tls: true
    options: {}
    className: ""
    # -- Set a default pathType for all hosts
    defaultPathType: ImplementationSpecific
    # -- Automatically generate tls certificate secret for defined hosts
    globalEasyTls: false
    labels: {}
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
    hosts: []
    # ingressClassName: nginx
    # name: my-app
    # subDomain: app
    # subDomainBase: dev
    # subDomainOverride: app.dev
    # serviceName: my-service
    # portName: http-rest
    # portNumber: 80
    # customSecretName: test
    # host: my.domain.tld
    # path: /test
    # customRules:
    # - host: my.extra.host
    #   http:
    #     paths:
    #       - path: /path
    #         pathType: Prefix
    #         backend:
    #           service:
    #             name: svc
    #             port:
    #               name: grpc
  patch-recordsetinjectipfromlb:
    enabled: false
  patch-scwapikey:
    enabled: false
  rabbitmq-binding:
    enabled: false
  rabbitmq-cluster:
    enabled: false
  rabbitmq-exchange:
    enabled: false
  rabbitmq-permission:
    enabled: false
  rabbitmq-policy:
    enabled: false
  rabbitmq-queue:
    enabled: false
  rabbitmq-user:
    enabled: false
  rabbitmq-vhost:
    enabled: false
  pyrra-servicelevelobjective:
    enabled: false
    target: "99"
    window: "30d"
    indicatorType: "ratio" # Can also be "latency"
    description: Pyrra's API requests and response errors over time grouped by route.
    # grouping:
    # - path
    # targetType: "custom" # Can be "ingress" or "service"
    # errorQuery: my_error_query
    # totalQuery: my_total_query
  sloth-prometheusservicelevel:
    enabled: false
    slos: []
    # slos:
    #   test-slo:
    #     objective: 99
    #     description: "SLO: My custom SLO"
    #     alertDescription: "My SLI is below the thresold!"
    #     errorQuery: my_error_query
    #     totalQuery: my_total_query
    ingress:
      enabled: false
      objective: 99
      description: "SLO: HTTP requests response availability"
    # service: sloth-servicelevel
    # type: app
    # env: default
  prometheus-rule:
    enabled: false
    namespaceSuffix: false
    prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
    rules: []
    # rules:
    # - expr: rabbitmq_queue_messages{namespace="namespace", queue="my-queue"}
    #   record: "my_namespace_my_api_rabbitmq_my_queue_queue_messages"
    rabbitmq:
      enabled: false
      queues:
        default: false # If true, generates rules for queues based on API name
        scaling: []
        # scaling:
        # - name: my-queue
    cpuAvg:
      enabled: false
      window: 1m
      podQuery: ""
      # query: my_query
      # container: elasticsearch
      # namespace: logging-es-http
    memoryAvg:
      enabled: false
      podQuery: ""
      # query: my_query
      # container: elasticsearch
      # namespace: logging-es-http
      # name: logging-es-http
    ingressAccessFreq:
      enabled: false
      window: 1m
      # query: my_query
      # namespace: logging-es-http
      # name: logging-es-http
    ingressControllerAccessFreq:
      enabled: false
      istio: false
      # controllerClass: "nginx"
      window: 1m
      # query: my_query
      # namespace: logging-es-http
      # name: logging-es-http
    serviceAccessFreq:
      enabled: false
      window: 1m
      # query: my_query
      # namespace: logging
      # name: logging-es-http
  keda-scaledobject:
    enabled: false
    namespaceSuffix: false
    minReplicaCount: 1
    maxReplicaCount: 10
    prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: keda-scaledobject
    extraTriggers: []
    # extraTriggers:
    # - type: prometheus
    #   metricType: Value
    #   metadata:
    #     serverAddress: http://prometheus-operated.monitoring.svc.cluster.local:9090
    #     metricName: "my_metric"
    #     threshold: "1"
    #     query: "my_prom_query"
    rabbitmq:
      enabled: false
      default:
        enabled: false
        in: 1
        out: 1
      queues: []
      # queues:
      # - name: my-queue
      #   value: 1
    cpuAvg:
      enabled: false
      threshold: 0.90
    memoryAvg:
      enabled: false
      threshold: 0.90
    ingressAccessFreq:
      enabled: false
      threshold: 100
    ingressControllerAccessFreq:
      enabled: false
      threshold: 100
    serviceAccessFreq:
      enabled: false
      threshold: 100
      # query: my_custom_prometheus_query
      # metricName: my_custom_metric_name
  flux-imagerepository:
    enabled: false
    interval: 1m0s
    secretName: docker-registry-admin
  flux-imageupdateautomation:
    enabled: false
    interval: 1m0s
    git:
      sourceRef: my-repo
      # sourceNamespace: my-namespace # Use this if you need a source out of your current release namespace
      ref:
        branch: main
      pushRef:
        branch: main
      author:
        email: flux-bot@my-domain.com
        name: flux-bot
      message: "chore: Updating images"
    update:
      path: ./config
      strategy: Setters
# resources: {}
resources:
  {}
  # kube-ingress:
  #   test:
  #     enabled: true
  # pyrra-servicelevelobjective:
  #   test-12-a:
  #     enabled: true
  # prometheus-rule:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true
  # keda-scaledobject:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true
  # sloth-servicelevel:
  #   app-test-1:
  #     enabled: true
  #   app-test-2:
  #     enabled: true

# resources:

#   rabbitmq-user:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev
#       tags:
#       - policymaker
#       - monitoring
#       - management
#       - administrator

#   rabbitmq-permission:
#     nk-api:
#       rabbitmqClusterName: apps-rabbitmq
#       rabbitmqClusterNamespace: dev

#       # Custom user
#       userName: my-rabbitmq-user-name
#       userRef: my-rabbitmq-user-ref

#       # Permissions defaults to read ".*"
#       read: true
#       write: true
#       configure: true

#       # Custom permissions
#       customPermissions:
#         read: "custom"

#   rabbitmq-vhost:
#     nk-api: {}

#   rabbitmq-cluster:
#     nk-api: {}

#   rabbitmq-policy:
#     nk-api: {}

#   rabbitmq-queue:
#     nk-api: {}

#   rabbitmq-exchange:
#     nk-api: {}

#   rabbitmq-binding:
#     nk-api: {}
#       # type: direct
#       # arguments:
#       #   alternate-exchange: my-alt-exchange

# projectIAMCustomRoles:
#   registry-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get
#     - cloudbuild.builds.get
#     - cloudbuild.builds.list

#   gcs-admin:
#     permissions:
#     - storage.objects.get
#     - storage.objects.create
#     - storage.objects.list
#     - storage.objects.update
#     - storage.objects.delete
#     - storage.buckets.create
#     - storage.buckets.get

# projectIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccountIAMMembers:
#   app: {}
#     # role: roles/dns.admin

# serviceAccounts:
#   kube-core: {}

# serviceAccountPolicies:
#  app: {}
#   # defaultRoles:
#   # - roles/viewer
#   # - roles/editor
#   # defaultRole: false
#   # role: roles/viewer
#   # sa: custom-sa
#   # roles:
#   # - role: roles/editor
#   #   serviceAccountMemberRefs:
#   #   - custom-sa

# serviceAccountKeys:
#   app: {}

# buckets:
#   app: {}

# bucketPolicies:
#   app: {}
#     # bucketRef: SuperBucket
#     # adminRef: test-admin
#     # public: true
#     # admin: true
#     # roles:
#     # - role: roles/storage.objectViewer
#     #   members:
#     #     - test-member

# backendBuckets:
#   app: {}
#     # bucketName: app-bucket-name
#     # enableCdn: true

# globalAdresses:
#   app: {}
#     # deletionPolicy: ""
#     # addressType: ""
#     # ipVersion: ""

# globalForwardingRules:
#   app: {}
#     # loadBalancingScheme: ""
#     # target:
#     #   type: targetHttpProxies
#     #   name: target-proxy-name
#     # ipAddress: global-adress-name

# targetHttpProxies:
#   app: {}
#     # urlMap: urlMap-name

# targetHttpsProxies:
#   app: {}
#     # urlMap: urlMap-name
#     # managedSslCertificates:
#     # - certificat-1
#     # - certificat-2

# urlMaps:
#   app: {}
#     # hostRule:
#     #   - hosts:
#     #     - app.domain.tld
#     #     pathMatcher: pathmatcher-name
#     # pathMatcher:
#     #   - defaultService: backend-bucket-name
#     #     name: pathmatcher-name

# recordSets:
#   app: {}
#     # managedZone: managed-zone-name
#     # rootDnsName: app.domain.tld.
#     # rrdatas: []
#     # # - 1.1.1.1
#     # # - 2.2.2.2
#     # patch:
#     #   injectIpFromLb: false
#     #   globalAddress: global-address-name

# managedSslCertificates:
#   app: {}
#     # domains: []
#     #   # - app.domain.tld
#     #   # - app2.domain.tld

composition:
  app:
    enabled: false
    # name: app
    config:
      maintenanceMode:
        enabled: false
        config: {}

      blueGreenMode:
        enabled: false
        production: "blue"
        blue:
          enabled: true
          config: {}
        green:
          enabled: true
          config: {}

      # If autoscaling is controller by something else than HPA, enable it
      disableReplicas: false

      flux:
        {}
        # enabled: false

        # imageRepository:

        # imageUpdateAutomation:
        #   enabled: false

      # imagePolicy: "my-policy" # Use this to override
      # imagePolicies:
      #   default:
      #     policy:
      #       semver:
      #         range: "*"
      #   dev:
      #     filterTags:
      #       # Matches v-${commitHash}-${timestamp} with a named capture group (https://pkg.go.dev/regexp)
      #       pattern: '^v-(.*)-(?P<ts>.*)'
      #       extract: '$ts'
      #     policy:
      #       numerical:
      #         order: asc
      #   staging:
      #     policy:
      #       semver:
      #         range: ^0.1.0
      #   prod:
      #     policy:
      #       semver:
      #         range: "0.1.0"

    components:
      kube-deployment:
        enabled: false
      kube-service:
        enabled: false
      kube-ingress:
        enabled: false
      kube-hpa:
        enabled: false
      kube-pdb:
        enabled: false
      flux-imagerepository:
        enabled: false
      flux-imageupdateautomation:
        enabled: false

compositions:
  {}
  # app:
  #   nk-api:
  #     enabled: true
  # name: nk-api
  # config:
  #   api:
  #     deployedEnv: prod
  #     logLevel: info
  #     type: node
  #   blueGreenMode:
  #     active: false
  #     blue:
  #       config:
  #         components:
  #           kube-deployment:
  #             replicaCount: 1
  #             image:
  #               tag: blue
  #       enabled: true
  #     enabled: true
  #     green:
  #       config:
  #         components:
  #           kube-deployment:
  #             replicaCount: 1
  #             image:
  #               tag: green
  #       enabled: true
  #     main: blue

  #   maintenanceMode:
  #     active: false
  #     config:
  #       components:
  #         kube-deployment:
  #           replicaCount: 1
  #           healthCheck:
  #             enabled: false
  #             path: /
  #           image:
  #             repository: rg.fr-par.scw.cloud/frog-cloud-scw-demo/maintenance
  #             tag: latest
  #           pod:
  #             env:
  #               secrets: null
  #               values:
  #               - name: TEAM_NAME
  #                 value: frog-cloud
  #               - name: TITLE
  #                 value: Oops!
  #               - name: MAIL_ADDRESS
  #                 value: admin@frog-cloud.com
  #               - name: LINK_COLOR
  #                 value: '#dc8100'
  #               - name: THEME
  #                 value: Light
  #               - name: PORT
  #                 value: 8080
  #               - name: RESPONSE_CODE
  #                 value: 503 Service Unavailable
  #               - name: MESSAGE
  #                 value: |
  #                   The website is currently under maintenance
  #               - name: CONTACT_LINK
  #                 value: contact us
  #               valuesMap: null
  #             mounts:
  #               configMap: null
  #         kube-service:
  #           port: 8080
  #     enabled: true

  # components:
  #   kube-deployment:
  #     enabled: true
  #     healthCheck:
  #       enabled: true
  #       path: /

  #     metrics:
  #       enabled: false
  #       serviceMonitor:
  #         enabled: false
  #         interval: 2s
  #     defaultImagePoliciesEnabled: false
  #     defaultImagePolicy: default
  #     logging:
  #       enabled: true
  #     pod:
  #       env:
  #         secrets:
  #         - secretKey: CLOUD_ACCESS_KEY
  #           secretName: nk-api-cloud
  #         - secretKey: CLOUD_SECRET_KEY
  #           secretName: nk-api-cloud
  #         - secretKey: CLOUD_BUCKET_NAME
  #           secretName: nk-api-cloud
  #     resources:
  #       limits:
  #         cpu: 300m
  #         memory: 300Mi
  #       requests:
  #         cpu: 300m
  #         memory: 300Mi
  #     image:
  #       repository: rg.fr-par.scw.cloud/frog-cloud-scw-demo/demo-app
  #       tag: preview
  #     annotations:
  #       reloader.stakater.com/auto: "true"
  #     replicaCount: 3

  #   flux-imagerepository:
  #     enabled: false
  #     interval: 1m0s
  #     secretName: docker-registry-admin

  #   flux-imageupdateautomation:
  #     enabled: false
  #     git:
  #       author:
  #         email: KUBE_CORE_GIT_BOT_USER
  #         name: KUBE_CORE_GIT_BOT_NAME
  #       message: 'chore: Updating images'
  #       pushRef:
  #         branch: KUBE_CORE_GITOPS_REF
  #       ref:
  #         branch: KUBE_CORE_GITOPS_REF
  #       sourceRef: scw-demo
  #     interval: 1m0s
  #     update:
  #       path: /config/gitops/prod/nk-api
  #       strategy: Setters

  #   kube-hpa:
  #     cpu: 80
  #     enabled: true
  #     maxReplicas: 10
  #     memory: 80
  #     minReplicas: 1

  #   app-ingress:
  #     annotations: null
  #     className: nginx
  #     enabled: true
  #     globalEasyTls: true
  #     host: app.demo.scw.frog-cloud.io
  #     labels: null
  #     options:
  #       accessFiltered: true
  #       allowedVisitors: self,admin
  #       autoDiscover: true
  #       clusterIssuer: letsencrypt-dns-production
  #       previewVisitors: self,admin
  #       proxyBodySize: 200m
  #       serviceUpstream: true
  #       ttl: 5
  #       upstreamVhost: nk-api.prod.svc.cluster.local

  #   kube-service:
  #     enabled: true
  #     port: 8080
  #     type: ClusterIP

  #   kube-pdb:
  #     enabled: true
